// Generated by CoffeeScript 1.4.0
(function() {
  var ProgressBar, Scrapper, async, fs, moment, program, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require("fs");

  async = require("async");

  request = require("request");

  moment = require("moment");

  ProgressBar = require("progress");

  program = require("commander");

  Scrapper = (function() {

    function Scrapper() {
      this.downloadImage = __bind(this.downloadImage, this);

      this.downloadImages = __bind(this.downloadImages, this);

      this.createFolders = __bind(this.createFolders, this);

      this.getImage = __bind(this.getImage, this);

      this.parseFeedEntry = __bind(this.parseFeedEntry, this);

      this.getImages = __bind(this.getImages, this);

      this.getPageInfo = __bind(this.getPageInfo, this);
      console.log("\n\n===Facebook Page Image Scrapper===");
      program.version("0.0.1").option("-p, --page <page>", "Facebook Page ID that you want to scrap. For example, https://www.facebook.com/starbucks page ID will be starbucks").option("-t, --token <token>", "Your access token. Generate an access token from https://developers.facebook.com/tools/explorer").option("-l, --limit <limit>", "Maximum number of images that you want to scrap, defaults to 10").option("-o, --output <output>", "Where to store the images. Defaults to ./images").parse(process.argv);
      if (!program.page) {
        console.error("\nPage ID not supplied. Please supply a Facebook Page Id, e.g. \n\nfbscrap -p kpopmusiclove -t <accesstoken>\n");
        return process.exit(1);
      }
      if (!program.token) {
        console.error("\nAccess token not found. Please supply a valid access token. You can get one from\nhttps://developers.facebook.com/tools/explorer\n\nThen you can run: \n\nfbscrap -p <facebook page id> -t <access token>\n");
        return process.exit(1);
      }
      this.limit = parseInt(program.limit) || 10;
      this.outputDir = program.output || "./images";
      this.fbPageId = program.page;
      this.accessToken = program.token;
      this.pageDir = "";
      this.nextPageLink = "";
      this.images = [];
      this.bar = {};
      this.reachedEndOfFeed = false;
      this.init();
    }

    Scrapper.prototype.init = function() {
      var _this = this;
      console.log("Facebook Page ID: " + this.fbPageId + "\n");
      return async.series({
        getPageInfo: this.getPageInfo,
        getImages: this.getImages,
        createFolders: this.createFolders,
        downloadImages: this.downloadImages
      }, function(err) {
        if (err) {
          console.error("\n\n Error:");
          console.error(err);
        } else {
          console.log("\n\n\nDone!\nYou can now check your images at " + _this.pageDir + ".\n\n");
          console.log("===Thank you and come again!===\n");
        }
        return process.exit();
      });
    };

    Scrapper.prototype.getPageInfo = function(callback) {
      var url,
        _this = this;
      url = "https://graph.facebook.com/" + this.fbPageId + "?access_token=" + this.accessToken;
      return request.get(url, {
        json: true
      }, function(err, body, response) {
        var pageName;
        if (err) {
          return callback(err);
        }
        if (response.error) {
          return callback(response.error);
        }
        pageName = response.name;
        _this.pageDir = _this.outputDir + ("/" + pageName);
        return callback(null);
      });
    };

    Scrapper.prototype.getImages = function(callback) {
      var url, _ref,
        _this = this;
      if (this.nextPageLink.length) {
        url = this.nextPageLink;
      } else {
        url = "https://graph.facebook.com/" + this.fbPageId + "/feed?fields=link,to&access_token=" + this.accessToken;
      }
      if ((_ref = this.getImagePageBar) == null) {
        this.getImagePageBar = new ProgressBar('-- Getting image links [:bar] :percent :current/:total', {
          total: this.limit,
          width: 20
        });
      }
      return request.get(url, {
        json: true
      }, function(err, body, response) {
        var entries, _ref1;
        if (err) {
          return callback(err);
        }
        if (response.error) {
          return callback(response.error);
        }
        if ((_ref1 = response.paging) != null ? _ref1.next : void 0) {
          _this.nextPageLink = response.paging.next;
        } else {
          _this.reachedEndOfFeed = true;
        }
        entries = response.data;
        return async.forEach(entries, _this.parseFeedEntry, function(err) {
          if (_this.reachedEndOfFeed) {
            return callback(null);
          }
          if (_this.images.length < _this.limit) {
            return _this.getImages(callback);
          } else {
            return callback(null);
          }
        });
      });
    };

    Scrapper.prototype.parseFeedEntry = function(entry, callback) {
      var imagePageId, matches,
        _this = this;
      if (this.images.length === this.limit) {
        return callback(null);
      }
      if (!entry.link) {
        return callback(null);
      }
      if (entry.to) {
        return callback(null);
      }
      if (!/facebook\.com\/photo\.php/.test(entry.link)) {
        return callback(null);
      }
      matches = entry.link.match(/fbid=(\d+)&/);
      if (!matches) {
        return callback(null);
      }
      imagePageId = matches[1];
      return this.getImage(imagePageId, function(err) {
        if (err) {
          return callback(err);
        }
        _this.getImagePageBar.tick();
        return callback(null);
      });
    };

    Scrapper.prototype.getImage = function(imagePageId, callback) {
      var url,
        _this = this;
      url = "https://graph.facebook.com/" + imagePageId + "?fields=images&access_token=" + this.accessToken;
      return request.get(url, {
        json: true
      }, function(err, body, response) {
        var datetime, link;
        if (err) {
          return callback(err);
        }
        if (response.error) {
          if (response.error.code === 100) {
            return callback(null);
          } else {
            return callback(response.error);
          }
        }
        link = response.images[0].source;
        datetime = response.created_time;
        _this.images.push({
          link: link,
          datetime: datetime
        });
        return callback(null);
      });
    };

    Scrapper.prototype.createFolders = function(callback) {
      if (!fs.existsSync(this.outputDir)) {
        fs.mkdirSync(this.outputDir);
      }
      if (!fs.existsSync(this.pageDir)) {
        fs.mkdirSync(this.pageDir);
      }
      return callback(null);
    };

    Scrapper.prototype.downloadImages = function(callback) {
      var _ref;
      console.log("\n");
      if ((_ref = this.downloadImageBar) == null) {
        this.downloadImageBar = new ProgressBar('-- Downloading images [:bar] :percent :current/:total', {
          total: this.images.length,
          width: 20
        });
      }
      return async.forEachLimit(this.images, 3, this.downloadImage, callback);
    };

    Scrapper.prototype.downloadImage = function(image, callback) {
      var cb, extension, imageName, imagePath, writeStream,
        _this = this;
      extension = image.link.match(/(jpg|png|gif)/)[1];
      imageName = moment(image.datetime).format('DD_MM_YYYY_HH_mm_ss') + "." + extension;
      imagePath = this.pageDir + "/" + imageName;
      cb = function() {
        _this.downloadImageBar.tick();
        return callback(null);
      };
      if (fs.existsSync(imagePath)) {
        return cb();
      }
      writeStream = fs.createWriteStream(imagePath);
      writeStream.on('error', function(err) {
        return callback(err);
      });
      writeStream.on('close', cb);
      return request.get(image.link).pipe(writeStream);
    };

    return Scrapper;

  })();

  module.exports = Scrapper;

}).call(this);
